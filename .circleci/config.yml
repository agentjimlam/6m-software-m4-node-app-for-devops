version: 2.1

orbs:
  node: circleci/node@5.0.1
  heroku: circleci/heroku@2.0.0
  docker: circleci/docker@2.1.4
  snyk: snyk/snyk@1.5.0

jobs:
  build:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Install dependencies"
          npm install
  test:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo "Running tests"
          npm run test

  build-and-push:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_PASSWORD
      - docker/build:
          image: jlam733/education-space
          tag: <<pipeline.git.tag>>
      - docker/push:
          image: jlam733/education-space
          tag: <<pipeline.git.tag>>

  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - run:
          name: Heroku Container Push
          command: |
            heroku container:login
            heroku stack:set container -a jimmylam-su-devops
            heroku container:push web -a jimmylam-su-devops
            heroku container:release web -a jimmylam-su-devops
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: jlam733/education-space
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - run: docker build -t $IMAGE_NAME .
      - snyk/scan: 
          docker-image-name: $IMAGE_NAME
  codescan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: jlam733/education-space
    steps:
      - checkout
      - setup_remote_docker
      - docker/check
      - snyk/install
      - run: |
          snyk code test

workflows:
  simple_workflow:
    jobs:
      - build
      - scan:
          requires:
            - build
      - codescan:
          requires:
            - build
      - test:
          requires:
            - scan
      # - build-and-push:
      #     filters:
      #       tags:
      #         only: /^v.*/
      # - deploy:
      #       requires:
      #         - build-and-push
      #       filters:
      #         tags:
      #           only: /^v.*/

# The tags: only: /^v.*/ filter ensures this job only runs when a Git tag starting with v is pushed (e.g., v1.0.0).
# The branches: ignore: /.*/ filter means that this job is ignored for all branch events, including pushes and merges to main.

# The build-and-push and deploy jobs will never run for branch events (e.g., git push or git merge to a branch, including main).

# Both build-and-push and deploy jobs will run only when a Git tag is pushed that matches the specified pattern (e.g., v1.0.0), 
# and branch pushes (e.g., to main) will not trigger these jobs. 

# by right we shouldn't do that branch ignore

# the idea is we only build and push when we have a version that is ready to release